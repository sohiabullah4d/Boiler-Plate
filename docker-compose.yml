version: '3'

services:
    # web:
    #     build:
    #         context: .
    #     environment:
    #         - NODE_ENV=development
    #         - staging=true
    #         - PORT=3000
    #     command: npm start
    #     volumes:
    #         - .:/myapp
    #     ports:
    #         - "0.0.0.0:7777:3000"
    #     networks:
    #         - dev-network
        # links:
        #     - pgsql
        #     - redis
        # depends_on:
        #     - pgsql
        #     - redis
    pgsql:
        image: postgres:14.5-alpine
        tmpfs:
          - /tmp
          - /var/run/postgresql
        volumes:
          - ./db:/var/lib/postgresql/data
          - ./postgres-initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
        ports:
          - "0.0.0.0:7778:5432"
        networks:
            - dev-network
        environment:
            POSTGRES_USER: docker
            POSTGRES_PASSWORD: docker
            POSTGRES_DB: test_db
    db:
        image: mysql:5.7
        restart: always
        environment:
            MYSQL_DATABASE: 'db'
            # So you don't have to use root, but you can if you like
            MYSQL_USER: 'user'
            # You can use whatever password you like
            MYSQL_PASSWORD: 'password'
            # Password for root access
            MYSQL_ROOT_PASSWORD: 'password'
        ports:
        # <Port exposed> : < MySQL Port running inside container>
            - '3306:3306'
    redis:
        image: redis:latest
        user: redis
        networks:
            - dev-network
        ports:
          - "0.0.0.0:7779:6379"
    rabbitmq:
        build:
            context: docker/rabbitmq
        container_name: rabbitmq
        hostname: rabbitmq
        ports:
            - 5672:5672
            - 15672:15672
        networks:
            - dev-network
        environment:
            - RABBITMQ_DEFAULT_USER=admin
            - RABBITMQ_DEFAULT_PASS=admin
            - RABBITMQ_DEFAULT_VHOST=/

networks:
    dev-network:
        driver: bridge